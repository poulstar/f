تو این پروژه کل کد رو خودمون داریم مینویسیم.
ویجت های Scaffold و SafeArea رو باهاشون کار کردیم تا حالا. اگه SafeArea کار نکردیم بگیم چی کار میکنه.
Center و Container هم که تکراری هستند.
از ویجت جدید Stack استفاده میکنیم تو این پروژه که برای اینه که ویجت های صفحه رو بتونیم بدون وابستگی به همدیگه تو صفحه جا به جا کنیم.
مثل همون پوزیشن توی HTML و CSS هست که معمولا از left و top استفاده میشه توش. اما right و bottom هم داره. خلاصه ما از left و top استفاده کردیم.
بچه های Stack، ویجت Positioned هستند که بتونیم بهشون left و top بدیم.

اولین بچه یه ستون هست که صفحه میز کل بازی هست و حرکتی نداره. داخلش از SizedBox، Divider و Expanded استفاده شده که تکراری هستند.

دومین و سومین بچه، ویجت Positioned هستند که برای بازیکن های بالا و پایین استفاده شدند. left و top شون متغیر هست که بشه وسط بازی تغییرشون داد. برای
تغییرشون هم از GestureDetector استفاده شده که فقط حالت افقی رو استفاده کردیم که نشه مهره ها رو به جلو حرکت داد. چون میخوایم دایم در حال حرکت باشه و فقط
در لحظه شروع جا به جا نشه، از اتریبیوت onHorizontalDragUpdate استفاده میکنیم. اما وقتی انگشت رو برمیداریم، باز هم همون dx رو داره و ۰ نمیشه. برای این
که این رو هم ۰ کنیم، onHorizontalDragEnd هم اضافه میکنیم و اونجا صفرش میکنیم. بچه اش هم یک player هست که خیلی طولانی نبود. اما برای بهتر شدن کد و تمرین
کار با کلاس ها، وقتی نوشتیمش به ویجت PlayerWidget تبدیلش میکنیم و نمونه دوم رو هم از همین میسازیم. لازم به ذکره که خیلی از متغیرها و ویژگی های دیگه که
بعدا به بازی اضافه شد، میتونه توی ویجت PlayerWidget جا بگیره. اما سر هر کلاس میشه یک مدل این رو درست کرد.

چهارمین بچه، برای توپ هست که چون کلا یه دونه بود کدش رو همونجا نوشتم و تبدیل به کلاس نکردم. اون رو هم میشه تبدیل کرد. ClipRRect هم که کار کردیم قبلا.
ویجت های جدید، Visibility هست یکیش که برای این که نمایش چیزی رو وسط بازی قطع کنیم و یا دوباره بذاریم استفاده شده. Rotated‌Box هست که جهت چرخش نوشته ازش
استفاده شده.

پنجمین بچه هم برای نوشته شروع بازی هست که با کلیک روش بازی شروع میشه. از ویجت های تکراری استفاده شده براش و تابع onPressed ش رو async میکنیم که حرکت
توپ نرم باشه و بازی گیر نکنه. در واقع import 'dart:async'; رو اول امیپورت کردیم. و await Future.delayed(const Duration(milliseconds: 1)); برای ایجاد
تاخیر در حرکت توپ هست که برنامه کار بکنه. از حلقه do while هم که استفاده میکنیم تا وقتی بازی تموم نشه توش گیر کنه.از کتابخونه Random استفاده کردیم که
همیشه سرعت توپ ثابت نباشه و جالب تر باشه. از تابع abs() استفاده شده یک سری از مقایسه های ساده هم همونجا استفاده کردیم که درکش برای بچه ها ساده تر هست
و تو کلاس گفته میشه. برخی از چیزهایی که نوشتم خودم دوست داشتم و قابل تغییر هست. مثلا این که اگه دو سوم توپ از بازیکن اگه رد شد امتیاز ثبت بشه. میشه گذاشت
اگه تا آخر رفت یا اگه نصفش رفت یا هر مدلی که دوست داریم. اما بعضی چیزها همونطوری نوشته میشه. مثل تغییر جهت حرکت توپ. جهت برخورد توپ با بازیکن ها، یک
سری محاسبات ریاضی انجام شده که بچه های کوچیک ازش سر در نمیارن و بچه های بزرگتر هم تک و توک شاید براشون جالب باشه. حتی جالب هم باشه احتمالا خیلی متوجهش
نمیشن. به خاطر همین کل اون محاسبات رو داخل یه تابع به اسم doTheMathWork نوشتم و این تابع رو میتونیم مستقیما به بچه ها بدیم که با قسمت ریاضی اش درگیر
نشن. اما کارهایی مثل مدیریت کردن مهره که از میز بازی بیرون نره ساده هست و بهتره که با توضیح کوتاه به خودشون بگیم انجام بدن.

تعداد زیاد متغیرهای استفاده شده در برنامه برای اینه که راحت برنامه قابل تغییر باشه و اگه خواستیم سایز توپ رو بزرگ یا کوچیک کنیم یا سایز بازیکن ها رو یا
پایان بازی و غیره رو راحت بتونیم با تغییر یک متغیر این کار رو انجام بدیم. از روی اسم ها خیلی ها قابل تشخیص هستند.

برای این که صفحه هم قابل کج کردن نباشه از کتابخونه import 'package:flutter/services.dart'; ایمپورتی کردیم کدهاش رو و اول تابع build از MyHomePage دستور
SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp,]);
رو اضافه کردیم.

توضیحات جزیی ای هم در کد به صورت کامنت ذکر شده.