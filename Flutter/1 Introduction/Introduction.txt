قبل از فلاتر فریم ورک هایی مثل xamarin (زامارین مال شرکت مایکروسافت هست که با زبان C# کد مینوشتن) و بعدش react native (که پشتیبانش شرکت فیس بوک بود و
با جاوا اسکریپت بود) استفاده میشدند. هنوز هم استفاده میشن. اما فلاتر ازشون جلو زده و پرکاربرد تر شده.
سال ۲۰۱۵ فلاتر توسط گوگل معرفی شد.
سال ۲۰۱۸ اولین نسخه استیبل که میشد کار کرد رو ریلیز کردند.
سال ۲۰۲۱ ورژن دوم فلاتر اومد و از اینجا مولتی پلتفرم شد (نسخه پایدار وبش هم تو همین سال منتشر شد.)

خود زبان دارت ۲۰۱۱ معرفی شد توسط گوگل و هدف اصلیش توسعه اپلیکیشن برای برنامه های وب و موبایل بود.
کمپانی هایی که از فلاتر برای توسعه استفاده میکنند:
. گوگل
. ای بی (ایسام از روی ای بی کپی کردند.)
. علی بابا (آمازون آسیا. نه علی بابای مسافرتی خودمون. اون هم شاید باشه D:)
. بی ام و
. تویوتا (برای اپ های داخل ماشین که راننده استفاده میکنه.)
. سونی
. سامسونگ
. اینستاگرام
. برنامه داخلی تلوبیون

مزایای فلاتر:
. مولتی پلتفرم بودن.
. سرعت توسعه بالا (برای کد نویسی).
و در نتیجه . تایم تو مارکت سریع تر.
. پرفرمنس اجرایی بالا و رندر کردن سریع.
. جامعه بزرگ برنامه نویس ها.
. مستندات خوب و سایت flutter.dev.

مطالب کل دوره:
۱- مبانی کامپیوتر (توضیح رم و این جور چیزا)
۲- شیء گرایی.
۳- زبان دارت.
۴- فریم ورک فلاتر.

(نکته برای خودم و نه بچه ها: موقعی که داریم دولپ میکنیم اپ رو، فلاتر از JIT (جاست اینتایم) کامپایلیشن استفاده میکنه. اما در حالت کلی JIT باعث کاهش کارایی
برنامه میشه. به خاطر همین موقعی که میزنیم بیلد بکنه، از AOT (Ahead of Time) کامپایلیشن استفاده میکنه که پرفرمنس اپ بالاتر بره. حجم برنامه هم شاید به
خاطر همین کمتر میشه وقتی که برنامه رو برای ریلیز بیلد میکنیم و احتمالا کارهای دیگه ای هم اعمال میکنه.)

مزیت های زبان دارت:
۱- توسط شرکت گوگل پشتیبانی میشه. که مثل فیس بوک تا حالا عمل نکرده. D:
۲- زبانش رو دو تا از جاوااسکریپت نویسای خیلی حرفه ای نوشتن و به خاطر همین خیلی سینتکسش شبیه جاوا اسکریپت هست و اگه اونو بلد باشیم یادگیری این خیلی راحت تره.
۳- اوپن سورس هست.
۴- پرفرمنس بالا.
۵- توسعه پذیر هست.
۶- کراس پلتفرم.

ویژگی هایی که داره زبان دارت:
۱- آبجکت اورینتد هست. (شیء گرا)
۲- گاربیج کالکتور داره.
۳- سینتکس شبیه سی. (سطح بالا)
۴- استاتیک تایپ چکنیگ که نوع داده ها رو در زمان اجرا بررسی میکنه و باعث افزایش سرعت میشه.
۵- (Type inference) به این معنی که لازم نیست خودمون نوع داده رو تعیین کنیم. اگه var هم بذاریم خودش چک میکنه.
۶- نال سیفتی هم داره. یعنی اجازه نمیده که چیزی نال باشه که اکسپشن پیش بیاد. مگر این که خودمون با ؟ بهش بگیم چیزی میتونه نال هم باشه. که مدیریت نکردن اون
دیگه میشه تقصیر خودمون. اما اگه ؟ رو نذاریم خودش اجازه نمیده که متغیرهامون نال باشن.
(نکته اضافه برای خودم: یک ویژگی هم که دارت داره اینه که میخواستن مثل جاوا اسکریپت، توی بروزر براش یه موتور مثل V8 بسازن که کدهای دارت رو داخل یه ماشین مجازی ران کنه
اما سال ۲۰۱۵ کلا کنسل کردن این کار رو و به جای این کار گفتن V8 که هست. برای اجرای دارت روی حالت وب، به خاطر شباهت بسیار زیادش به js میشه اون رو به راحتی
به زبان js تبدیل کرد و بعد روی همون موتور v8 جاوااسکرپتش رو اجرا کرد.)

شیءگرایی:
باعث سرعت توسعه بالا در برنامه نویسی میشه.
۴ مفهوم اصلی شیءگرایی.
۱- انکپسولیشن:
تو برنامه نویسی اومدن دنیای واقعی رو گنجوندن. توی دنیا هر چیزی یک شیء هست و یک سری خصوصیات داره و یک سری کارهایی رو میتونه انجام بده.
مثلا ویژگی هایی که ماشین داره رنگ و جنس بدنه و دنده و بوق و ... هست.
یک سری کار هم انجام میده.
مثلا میتونه بوق رو بزنه که انجام یک کار هست. یا ترمز کنه. یا گاز بده.
پدال گاز یک ویژگی هست که ماشین داره و گاز دادن کاری هست که با ماشین میشه انجام داد. گاز دادن میشه فعلش و به صورت یک تابع (متد) در کلاس مینویسیمش.
بنابراین هر چیزی در دنیای واقعی رو میشه به صورت یک شیء در نظر گرفت و به کلاس تبدیلش کرد که هر کلاس از یک سری ویژگی ها (attributes) و یک سری عملکرد (method)
تشکیل شده.
به این بسته بندی کردن اطلاعات درون یک کلاس میگن انکپسولیشن.
۲- ابسترکشن (انتزاع)
همین مفهوم بسته بندی کلاس که باعث میشه هر کسی دیگه وارد جزییات نشه. یه کلمه دیگه برای ابسترکشن میشه تجرید که یعنی مجرد سازی یعنی جدا کردن و تکه تکه کردن.
هر چیزی رو جدا میکنیم و تبدیل میشه به یه شیء. حالا یک سری ویژگی و متد داره که به یه طریقی کار میکنن. کلاس های بقیه چه طور کار میکنه به ما ربطی نداره.
ما متدشون رو صدا میکنیم نحوه عملکردش رو یکی دیگه نوشته. در واقع ابسترکشن فقط مفهوم هست. مفهوم جدا کردن هر کلاس و بخش بندی کردن هر کلاس و کارهاش میشه ابسترکشن.
۳- اینحریتنس (ارث بری)
وقتی یه کلاس خلق شد، دیگه لازم نیست برای ساخت نمونه های جدید که شبیه کلاس قبلی هستند کلا یک کلاس رو از اول تعریف کنیم. خیلی از چیزها که تکراری هستند رو میشه
با مفهوم ارث بری از کلاسی که موجود هست ارث برد و کلی صرفه جویی در کد نویسی کرد.
۴- پولیمورفیزم (چند ریختی)
حالا کلاسی که از کلاس دیگه ارث برده دقیقا که مثل همون نیست. بعضی از ویژگی هاش یا متدهاش قطعا فرق میکنه. (چون اگه فرق نمیکرد که از همون استفاده میکردیم.)
کلاس جدید حتما چیزهای جدیدی داره. میشه اون ها رو اضافه کرد. اما ممکنه بعضی از چیزهای قدیمی ای که از کلاس قبلی به ارث برده متفاوت باشه. اون ها رو میشه اوراید
کرد و به صورت جدید نوشت که به این میگن چند ریختی.
که تو کدها هم این مفاهیم رو میبینیم و ازشون استفاده خواهیم کرد.